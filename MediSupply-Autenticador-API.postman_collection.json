{
	"info": {
		"_postman_id": "1b3d434a-9437-4db5-aa3b-78a44bab739c",
		"name": "MediSupply Autenticador API",
		"description": "Colección de endpoints para el servicio de autenticación MediSupply con automatización de pruebas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2750860",
		"_collection_link": "https://timecontrol.postman.co/workspace/TCT~e4bf613c-84ca-4624-ad9c-4c8c0259e211/collection/2750860-1b3d434a-9437-4db5-aa3b-78a44bab739c?action=share&source=collection_link&creator=2750860"
	},
	"item": [
		{
			"name": "Auth Ping - Exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que el servicio esté funcionando",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is pong\", function () {",
							"    const responseText = pm.response.text().trim();",
							"    pm.expect(responseText).to.eql('\"pong\"');",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Guardar timestamp para reportes",
							"pm.globals.set(\"last_health_check\", new Date().toISOString());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auth/ping",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"ping"
					]
				},
				"description": "Health check del servicio de autenticación"
			},
			"response": []
		},
		{
			"name": "User Ping  - Exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que el servicio de usuarios esté funcionando",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has service status\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('service', 'users');",
							"    pm.expect(jsonData.data).to.have.property('status', 'healthy');",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auth/user/ping",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user",
						"ping"
					]
				},
				"description": "Health check del servicio de usuarios"
			},
			"response": []
		},
		{
			"name": "Crear Usuario  - Exitoso",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Limpiar variables previas para asegurar un flujo limpio",
							"pm.globals.unset('created_user_id');",
							"pm.globals.unset('created_user_email');",
							"console.log('Variables limpiadas. Iniciando creación de usuario...');",
							"",
							"// Generar datos aleatorios para el usuario",
							"const nombresInstituciones = [",
							"    'Hospital San Rafael', 'Clínica del Sol', 'Laboratorio Central',",
							"    'Hospital General', 'Clínica Especializada', 'Laboratorio Médico',",
							"    'Hospital Universitario', 'Clínica Privada', 'Laboratorio Clínico',",
							"    'Hospital Regional', 'Clínica Familiar', 'Laboratorio Diagnóstico'",
							"];",
							"",
							"const tiposInstitucion = ['Clínica', 'Hospital', 'Laboratorio'];",
							"const especialidades = ['Cadena de frío', 'Alto valor', 'Seguridad'];",
							"const dominios = ['gmail.com', 'hotmail.com', 'yahoo.com', 'hospital.com', 'clinica.com', 'laboratorio.com'];",
							"",
							"// Seleccionar datos aleatorios",
							"const nombreInstitucion = nombresInstituciones[Math.floor(Math.random() * nombresInstituciones.length)];",
							"const tipoInstitucion = tiposInstitucion[Math.floor(Math.random() * tiposInstitucion.length)];",
							"const especialidad = especialidades[Math.floor(Math.random() * especialidades.length)];",
							"",
							"// Generar email aleatorio",
							"const usuarioAleatorio = 'contacto' + Math.floor(Math.random() * 1000);",
							"const dominioAleatorio = dominios[Math.floor(Math.random() * dominios.length)];",
							"const emailAleatorio = usuarioAleatorio + '@' + dominioAleatorio;",
							"",
							"// Generar datos adicionales aleatorios",
							"const taxId = Math.floor(Math.random() * 900000000) + 100000000;",
							"const telefonoAleatorio = '3' + Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');",
							"const nombreSolicitante = 'Dr. ' + ['Juan', 'María', 'Carlos', 'Ana', 'Luis', 'Carmen'][Math.floor(Math.random() * 6)] + ' ' + ['Pérez', 'García', 'López', 'Martínez', 'González'][Math.floor(Math.random() * 5)];",
							"const emailSolicitante = 'solicitante' + Math.floor(Math.random() * 1000) + '@' + dominioAleatorio;",
							"const logoFilename = nombreInstitucion.toLowerCase().replace(/\\s+/g, '_') + '_logo.png';",
							"const direccionAleatoria = 'Calle ' + (Math.floor(Math.random() * 999) + 1) + ' #' + (Math.floor(Math.random() * 99) + 1) + '-' + (Math.floor(Math.random() * 99) + 1) + ', Bogotá';",
							"",
							"// Guardar en variables de entorno",
							"pm.environment.set('nombre_institucion', nombreInstitucion);",
							"pm.environment.set('email_institucion', emailAleatorio);",
							"pm.environment.set('tipo_institucion', tipoInstitucion);",
							"pm.environment.set('especialidad', especialidad);",
							"pm.environment.set('tax_id', taxId.toString());",
							"pm.environment.set('telefono', telefonoAleatorio);",
							"pm.environment.set('nombre_solicitante', nombreSolicitante);",
							"pm.environment.set('email_solicitante', emailSolicitante);",
							"pm.environment.set('logo_filename', logoFilename);",
							"pm.environment.set('direccion', direccionAleatoria);",
							"",
							"console.log('Datos aleatorios generados:');",
							"console.log('Institución:', nombreInstitucion);",
							"console.log('Email:', emailAleatorio);",
							"console.log('Tipo:', tipoInstitucion);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar creación exitosa de usuario",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has user data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('institution_name');",
							"    pm.expect(jsonData.data).to.have.property('email');",
							"});",
							"",
							"pm.test(\"User has required fields\", function () {",
							"    if (pm.response.code === 201) {",
							"        const jsonData = pm.response.json();",
							"        const user = jsonData.data;",
							"        pm.expect(user.institution_name).to.equal(pm.environment.get('nombre_institucion'));",
							"        pm.expect(user.email).to.equal(pm.environment.get('email_institucion'));",
							"        pm.expect(user.institution_type).to.equal(pm.environment.get('tipo_institucion'));",
							"        pm.expect(user).to.have.property('tax_id');",
							"        pm.expect(user).to.have.property('address');",
							"        pm.expect(user).to.have.property('phone');",
							"        pm.expect(user).to.have.property('specialty');",
							"        pm.expect(user).to.have.property('applicant_name');",
							"        pm.expect(user).to.have.property('applicant_email');",
							"        // Verificar que no se devuelvan campos internos",
							"        pm.expect(user).to.not.have.property('role');",
							"        pm.expect(user).to.not.have.property('keycloak_id');",
							"    }",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"// Validar que el ID sea un UUID válido",
							"pm.test(\"ID is valid UUID\", function () {",
							"    if (pm.response.code === 201) {",
							"        const jsonData = pm.response.json();",
							"        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
							"        pm.expect(jsonData.data.id).to.match(uuidRegex);",
							"    }",
							"});",
							"",
							"// Guardar ID del usuario para pruebas posteriores",
							"if (pm.response.code === 201) {",
							"    const jsonData = pm.response.json();",
							"    const userId = jsonData.data.id;",
							"    const userEmail = jsonData.data.email;",
							"    ",
							"    // Guardar en variables globales",
							"    pm.globals.set('created_user_id', userId);",
							"    pm.globals.set('created_user_email', userEmail);",
							"    ",
							"    // Verificar que se guardó correctamente",
							"    const savedId = pm.globals.get('created_user_id');",
							"    const savedEmail = pm.globals.get('created_user_email');",
							"    ",
							"    console.log('=== USUARIO CREADO EXITOSAMENTE ===');",
							"    console.log('ID del usuario:', userId);",
							"    console.log('Email del usuario:', userEmail);",
							"    console.log('Variable created_user_id guardada:', savedId);",
							"    console.log('Variable created_user_email guardada:', savedEmail);",
							"    console.log('=== FIN CREACIÓN ===');",
							"    ",
							"    // Validar que se guardó correctamente",
							"    if (!savedId || savedId !== userId) {",
							"        console.error('ERROR: No se pudo guardar el ID del usuario en la variable global');",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"institution_name\": \"{{nombre_institucion}}\",\n  \"tax_id\": \"{{tax_id}}\",\n  \"email\": \"{{email_institucion}}\",\n  \"address\": \"{{direccion}}\",\n  \"phone\": \"{{telefono}}\",\n  \"institution_type\": \"{{tipo_institucion}}\",\n  \"logo_filename\": \"{{logo_filename}}\",\n  \"specialty\": \"{{especialidad}}\",\n  \"applicant_name\": \"{{nombre_solicitante}}\",\n  \"applicant_email\": \"{{email_solicitante}}\",\n  \"password\": \"password{{Math.floor(Math.random() * 1000) + 100}}\",\n  \"confirm_password\": \"password{{Math.floor(Math.random() * 1000) + 100}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user"
					]
				},
				"description": "Crear un nuevo usuario con todos los campos obligatorios (incluye integración con Keycloak - rol Cliente automático)"
			},
			"response": []
		},
		{
			"name": "Crear Usuario con Imagen - Exitoso",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar email aleatorio único para usuario con imagen",
							"const timestamp = Date.now();",
							"const randomNum = Math.floor(Math.random() * 10000);",
							"const emailAleatorio = 'hospital_imagen_' + timestamp + '_' + randomNum + '@test.com';",
							"pm.environment.set('email_usuario_imagen', emailAleatorio);",
							"console.log('Email generado para usuario con imagen:', emailAleatorio);",
							"",
							"// Generar datos de prueba",
							"pm.environment.set('nombre_institucion_imagen', 'Hospital con Logo');",
							"pm.environment.set('tax_id_imagen', '12345678-9');",
							"pm.environment.set('direccion_imagen', 'Calle 123 #45-67, Bogotá');",
							"pm.environment.set('telefono_imagen', '3001234567');",
							"pm.environment.set('tipo_institucion_imagen', 'Hospital');",
							"pm.environment.set('especialidad_imagen', 'Alto valor');",
							"pm.environment.set('nombre_solicitante_imagen', 'Dr. Juan Pérez');",
							"pm.environment.set('email_solicitante_imagen', 'juan.perez@hospital.com');",
							"pm.environment.set('password_imagen', 'password123');",
							"pm.environment.set('password_confirm_imagen', 'password123');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar creación exitosa de usuario con imagen",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has success message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).to.include('registrado exitosamente');",
							"});",
							"",
							"pm.test(\"Response has user data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('institution_name');",
							"    pm.expect(jsonData.data).to.have.property('email');",
							"});",
							"",
							"pm.test(\"User has logo fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property('logo_filename');",
							"    pm.expect(jsonData.data).to.have.property('logo_url');",
							"    ",
							"    // Verificar que el logo_filename no esté vacío si se subió una imagen",
							"    if (jsonData.data.logo_filename) {",
							"        pm.expect(jsonData.data.logo_filename).to.not.be.empty;",
							"    }",
							"    ",
							"    // Verificar que el logo_url no esté vacío si se subió una imagen",
							"    if (jsonData.data.logo_url) {",
							"        pm.expect(jsonData.data.logo_url).to.not.be.empty;",
							"        pm.expect(jsonData.data.logo_url).to.include('storage.googleapis.com');",
							"    }",
							"});",
							"",
							"pm.test(\"Response time is less than 10 seconds\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);",
							"});",
							"",
							"// Guardar información del usuario creado",
							"const jsonData = pm.response.json();",
							"if (jsonData.data && jsonData.data.id) {",
							"    pm.globals.set('created_user_id_imagen', jsonData.data.id);",
							"    pm.globals.set('created_user_email_imagen', jsonData.data.email);",
							"    console.log('Usuario con imagen creado:', jsonData.data.id);",
							"    console.log('Email del usuario:', jsonData.data.email);",
							"    console.log('Logo filename:', jsonData.data.logo_filename);",
							"    console.log('Logo URL:', jsonData.data.logo_url);",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "institution_name",
							"value": "{{nombre_institucion_imagen}}",
							"type": "text"
						},
						{
							"key": "tax_id",
							"value": "{{tax_id_imagen}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email_usuario_imagen}}",
							"type": "text"
						},
						{
							"key": "address",
							"value": "{{direccion_imagen}}",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "{{telefono_imagen}}",
							"type": "text"
						},
						{
							"key": "institution_type",
							"value": "{{tipo_institucion_imagen}}",
							"type": "text"
						},
						{
							"key": "logo",
							"type": "file",
							"src": "/Users/juliosanchez/Downloads/images.jpeg"
						},
						{
							"key": "specialty",
							"value": "{{especialidad_imagen}}",
							"type": "text"
						},
						{
							"key": "applicant_name",
							"value": "{{nombre_solicitante_imagen}}",
							"type": "text"
						},
						{
							"key": "applicant_email",
							"value": "{{email_solicitante_imagen}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password_imagen}}",
							"type": "text"
						},
						{
							"key": "confirm_password",
							"value": "{{password_confirm_imagen}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/auth/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user"
					]
				},
				"description": "Crear usuario con imagen usando form-data (multipart/form-data)"
			},
			"response": []
		},
		{
			"name": "Listar Usuarios  - Exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar listado de usuarios",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has correct structure\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('users');",
							"    pm.expect(jsonData.data).to.have.property('pagination');",
							"});",
							"",
							"pm.test(\"Pagination structure is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    const pagination = jsonData.data.pagination;",
							"    pm.expect(pagination).to.have.property('page');",
							"    pm.expect(pagination).to.have.property('per_page');",
							"    pm.expect(pagination).to.have.property('total');",
							"    pm.expect(pagination).to.have.property('total_pages');",
							"    pm.expect(pagination).to.have.property('has_next');",
							"    pm.expect(pagination).to.have.property('has_prev');",
							"});",
							"",
							"pm.test(\"Users array is present\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.users).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"// Guardar información de paginación para reportes",
							"if (pm.response.code === 200) {",
							"    const jsonData = pm.response.json();",
							"    pm.globals.set('total_users', jsonData.data.pagination.total);",
							"    pm.globals.set('current_page', jsonData.data.pagination.page);",
							"    console.log('Total usuarios:', jsonData.data.pagination.total);",
							"    console.log('Página actual:', jsonData.data.pagination.page);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auth/user?page=1&per_page=10",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "per_page",
							"value": "10"
						}
					]
				},
				"description": "Obtener lista de usuarios con paginación"
			},
			"response": []
		},
		{
			"name": "Obtener Usuario por ID  - Exitoso",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Verificar que existe un usuario creado previamente",
							"const createdUserId = pm.globals.get('created_user_id');",
							"if (!createdUserId) {",
							"    console.error('ERROR: No hay un usuario creado previamente.');",
							"    console.error('Debe ejecutar primero el endpoint \"Crear Usuario - Exitoso\"');",
							"    console.error('La variable created_user_id está vacía.');",
							"    // No podemos continuar sin un ID válido",
							"    throw new Error('No hay usuario creado. Ejecute primero \"Crear Usuario - Exitoso\"');",
							"} else {",
							"    console.log('Usuario ID encontrado:', createdUserId);",
							"    console.log('Procediendo a obtener usuario con ID:', createdUserId);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar obtención de usuario",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has user data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('institution_name');",
							"    pm.expect(jsonData.data).to.have.property('email');",
							"});",
							"",
							"pm.test(\"User ID matches requested\", function () {",
							"    if (pm.response.code === 200) {",
							"        const jsonData = pm.response.json();",
							"        const requestedId = pm.globals.get('created_user_id');",
							"        if (requestedId) {",
							"            pm.expect(jsonData.data.id).to.equal(requestedId);",
							"        }",
							"    }",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auth/user/{{created_user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user",
						"{{created_user_id}}"
					]
				},
				"description": "Obtener un usuario específico por su ID"
			},
			"response": []
		},
		{
			"name": "Obtener Usuario - No Encontrado - Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar error de usuario no encontrado",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.be.a('string');",
							"    pm.expect(jsonData.error.length).to.be.above(0);",
							"});",
							"",
							"pm.test(\"Error message contains not found info\", function () {",
							"    const jsonData = pm.response.json();",
							"    const errorMessage = jsonData.error.toLowerCase();",
							"    pm.expect(errorMessage).to.satisfy(function(msg) {",
							"        return msg.includes('no encontrado') || msg.includes('not found') || msg.includes('no existe');",
							"    });",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auth/user/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user",
						"00000000-0000-0000-0000-000000000000"
					]
				},
				"description": "Ejemplo de error cuando el usuario no existe"
			},
			"response": []
		},
		{
			"name": "Crear Usuario - Email Duplicado - Bad Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Verificar que existe un usuario creado previamente",
							"const createdUserEmail = pm.globals.get('created_user_email');",
							"if (!createdUserEmail) {",
							"    console.log('No hay usuario creado previamente. Creando uno...');",
							"    // Crear un usuario temporal para duplicar",
							"    const tempEmail = 'temp_' + Math.floor(Math.random() * 1000) + '@test.com';",
							"    pm.globals.set('created_user_email', tempEmail);",
							"    console.log('Email temporal creado:', tempEmail);",
							"} else {",
							"    console.log('Usando email existente para duplicar:', createdUserEmail);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar error de email duplicado o éxito si no hay duplicado",
							"pm.test(\"Status code is 201 or 400\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has appropriate structure\", function () {",
							"    const jsonData = pm.response.json();",
							"    if (pm.response.code === 201) {",
							"        // Si se creó exitosamente, validar estructura de éxito",
							"        pm.expect(jsonData).to.have.property('data');",
							"        pm.expect(jsonData.data).to.have.property('id');",
							"        console.log('Usuario creado exitosamente (no había duplicado)');",
							"    } else {",
							"        // Si hay error, validar estructura de error",
							"        pm.expect(jsonData).to.have.property('error');",
							"        pm.expect(jsonData.error).to.be.a('string');",
							"        pm.expect(jsonData.error.length).to.be.above(0);",
							"        console.log('Error detectado:', jsonData.error);",
							"    }",
							"});",
							"",
							"pm.test(\"Error message validation (if error)\", function () {",
							"    if (pm.response.code !== 201) {",
							"        const jsonData = pm.response.json();",
							"        const errorMessage = jsonData.error.toLowerCase();",
							"        pm.expect(errorMessage).to.satisfy(function(msg) {",
							"            return msg.includes('duplicado') || msg.includes('ya existe') || msg.includes('existente') || msg.includes('email');",
							"        });",
							"    }",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"institution_name\": \"Hospital Test Duplicado\",\n  \"tax_id\": \"12345678-9\",\n  \"email\": \"{{created_user_email}}\",\n  \"address\": \"Calle 123 #45-67, Bogotá\",\n  \"phone\": \"3001234567\",\n  \"institution_type\": \"Hospital\",\n  \"specialty\": \"Alto valor\",\n  \"applicant_name\": \"Dr. Juan Pérez\",\n  \"applicant_email\": \"juan.perez@hospital.com\",\n  \"password\": \"password123\",\n  \"confirm_password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user"
					]
				},
				"description": "Ejemplo de error por email duplicado"
			},
			"response": []
		},
		{
			"name": "Crear Usuario - Campos Faltantes - Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que se manejen correctamente los errores",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.be.a('string');",
							"    pm.expect(jsonData.error.length).to.be.above(0);",
							"});",
							"",
							"pm.test(\"Error message contains validation info\", function () {",
							"    const jsonData = pm.response.json();",
							"    const errorMessage = jsonData.error.toLowerCase();",
							"    pm.expect(errorMessage).to.satisfy(function(msg) {",
							"        return msg.includes('obligatorio') || msg.includes('debe') || msg.includes('formato');",
							"    });",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"institution_name\": \"{{nombre_invalido}}\",\n  \"tax_id\": \"{{tax_id_invalido}}\",\n  \"email\": \"{{email_invalido}}\",\n  \"address\": \"{{direccion_invalida}}\",\n  \"phone\": \"{{telefono_invalido}}\",\n  \"institution_type\": \"{{tipo_invalido}}\",\n  \"specialty\": \"{{especialidad_invalida}}\",\n  \"applicant_name\": \"{{nombre_solicitante_invalido}}\",\n  \"applicant_email\": \"{{email_solicitante_invalido}}\",\n  \"password\": \"{{password_invalido}}\",\n  \"confirm_password\": \"{{password_confirm_invalido}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user"
					]
				},
				"description": "Ejemplo de petición con errores de validación"
			},
			"response": []
		},
		{
			"name": "Crear Usuario  - Validar Tipos de Institución - Exitoso",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar email aleatorio único",
							"const timestamp = Date.now();",
							"const randomNum = Math.floor(Math.random() * 10000);",
							"const emailAleatorio = 'laboratorio_' + timestamp + '_' + randomNum + '@test.com';",
							"pm.environment.set('email_tipos_institucion', emailAleatorio);",
							"console.log('Email generado para Validar Tipos de Institución:', emailAleatorio);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar creación exitosa con tipo de institución válido",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has user data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('institution_name');",
							"    pm.expect(jsonData.data).to.have.property('email');",
							"    pm.expect(jsonData.data).to.have.property('institution_type');",
							"});",
							"",
							"pm.test(\"Institution type is valid\", function () {",
							"    const jsonData = pm.response.json();",
							"    const institutionType = jsonData.data.institution_type;",
							"    pm.expect(institutionType).to.be.oneOf(['Clínica', 'Hospital', 'Laboratorio']);",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"// Guardar ID del usuario para pruebas posteriores",
							"if (pm.response.code === 201) {",
							"    const jsonData = pm.response.json();",
							"    pm.globals.set('validation_user_id', jsonData.data.id);",
							"    console.log('Usuario de validación creado con ID:', jsonData.data.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"institution_name\": \"Laboratorio Central\",\n  \"tax_id\": \"55555555-5\",\n  \"email\": \"{{email_tipos_institucion}}\",\n  \"address\": \"Calle 321 #65-43, Barranquilla\",\n  \"phone\": \"3007777777\",\n  \"institution_type\": \"Laboratorio\",\n  \"specialty\": \"Cadena de frío\",\n  \"applicant_name\": \"Dr. Ana Martínez\",\n  \"applicant_email\": \"ana.martinez@laboratoriocentral.com\",\n  \"password\": \"password123\",\n  \"confirm_password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user"
					]
				},
				"description": "Validar tipos de institución: Clínica, Hospital, Laboratorio"
			},
			"response": []
		},
		{
			"name": "Crear Usuario  - Validar Tipos de Institución - Bad Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar email aleatorio único",
							"const timestamp = Date.now();",
							"const randomNum = Math.floor(Math.random() * 10000);",
							"const emailAleatorio = 'invalido_' + timestamp + '_' + randomNum + '@test.com';",
							"pm.environment.set('email_tipo_invalido', emailAleatorio);",
							"console.log('Email generado para Validar Tipos de Institución - Bad Request:', emailAleatorio);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar error por tipo de institución inválido",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.be.a('string');",
							"    pm.expect(jsonData.error.length).to.be.above(0);",
							"});",
							"",
							"pm.test(\"Error message contains institution type validation\", function () {",
							"    const jsonData = pm.response.json();",
							"    const errorMessage = jsonData.error.toLowerCase();",
							"    pm.expect(errorMessage).to.satisfy(function(msg) {",
							"        return msg.includes('tipo de institución') || msg.includes('institución') || msg.includes('clínica') || msg.includes('hospital') || msg.includes('laboratorio');",
							"    });",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"institution_name\": \"Hospital Test Tipo Inválido\",\n  \"tax_id\": \"12345678-9\",\n  \"email\": \"{{email_tipo_invalido}}\",\n  \"address\": \"Calle 123 #45-67, Bogotá\",\n  \"phone\": \"3001234567\",\n  \"institution_type\": \"Tipo Inválido\",\n  \"specialty\": \"Cadena de frío\",\n  \"applicant_name\": \"Dr. Juan Pérez\",\n  \"applicant_email\": \"juan.perez@hospital.com\",\n  \"password\": \"password123\",\n  \"confirm_password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user"
					]
				},
				"description": "Validar error por tipo de institución inválido"
			},
			"response": []
		},
		{
			"name": "Crear Usuario  - Validar Especialidades - Exitoso",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar email aleatorio único",
							"const timestamp = Date.now();",
							"const randomNum = Math.floor(Math.random() * 10000);",
							"const emailAleatorio = 'clinica_' + timestamp + '_' + randomNum + '@test.com';",
							"pm.environment.set('email_especialidades', emailAleatorio);",
							"console.log('Email generado para Validar Especialidades:', emailAleatorio);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar creación exitosa con especialidad válida",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has user data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('institution_name');",
							"    pm.expect(jsonData.data).to.have.property('email');",
							"    pm.expect(jsonData.data).to.have.property('specialty');",
							"});",
							"",
							"pm.test(\"Specialty is valid\", function () {",
							"    const jsonData = pm.response.json();",
							"    const specialty = jsonData.data.specialty;",
							"    pm.expect(specialty).to.be.oneOf(['Cadena de frío', 'Alto valor', 'Seguridad']);",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"institution_name\": \"Clínica Especializada\",\n  \"tax_id\": \"87654321-0\",\n  \"email\": \"{{email_especialidades}}\",\n  \"address\": \"Calle 456 #78-90, Medellín\",\n  \"phone\": \"3009876543\",\n  \"institution_type\": \"Clínica\",\n  \"specialty\": \"Seguridad\",\n  \"applicant_name\": \"Dr. María García\",\n  \"applicant_email\": \"maria.garcia@clinicaespecializada.com\",\n  \"password\": \"password123\",\n  \"confirm_password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user"
					]
				},
				"description": "Validar especialidades: Cadena de frío, Alto valor, Seguridad"
			},
			"response": []
		},
		{
			"name": "Crear Usuario  - Validar Especialidades - Bad Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar email aleatorio único",
							"const timestamp = Date.now();",
							"const randomNum = Math.floor(Math.random() * 10000);",
							"const emailAleatorio = 'especialidad_invalida_' + timestamp + '_' + randomNum + '@test.com';",
							"pm.environment.set('email_especialidad_invalida', emailAleatorio);",
							"console.log('Email generado para Validar Especialidades - Bad Request:', emailAleatorio);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar error por especialidad inválida",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.be.a('string');",
							"    pm.expect(jsonData.error.length).to.be.above(0);",
							"});",
							"",
							"pm.test(\"Error message contains specialty validation\", function () {",
							"    const jsonData = pm.response.json();",
							"    const errorMessage = jsonData.error.toLowerCase();",
							"    pm.expect(errorMessage).to.satisfy(function(msg) {",
							"        return msg.includes('especialidad') || msg.includes('cadena de frío') || msg.includes('alto valor') || msg.includes('seguridad');",
							"    });",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"institution_name\": \"Clínica Test Especialidad Inválida\",\n  \"tax_id\": \"87654321-0\",\n  \"email\": \"{{email_especialidad_invalida}}\",\n  \"address\": \"Calle 456 #78-90, Medellín\",\n  \"phone\": \"3009876543\",\n  \"institution_type\": \"Clínica\",\n  \"specialty\": \"Especialidad Inválida\",\n  \"applicant_name\": \"Dr. María García\",\n  \"applicant_email\": \"maria.garcia@clinicaespecializada.com\",\n  \"password\": \"password123\",\n  \"confirm_password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user"
					]
				},
				"description": "Validar error por especialidad inválida"
			},
			"response": []
		},
		{
			"name": "Crear Usuario  - Validar Límites de Caracteres - Bad Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar email aleatorio único",
							"const timestamp = Date.now();",
							"const randomNum = Math.floor(Math.random() * 10000);",
							"const emailAleatorio = 'hospital_' + timestamp + '_' + randomNum + '@test.com';",
							"pm.environment.set('email_limites_caracteres', emailAleatorio);",
							"console.log('Email generado para Validar Límites de Caracteres:', emailAleatorio);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar error por límite de caracteres excedido",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.be.a('string');",
							"    pm.expect(jsonData.error.length).to.be.above(0);",
							"});",
							"",
							"pm.test(\"Error message contains character limit info\", function () {",
							"    const jsonData = pm.response.json();",
							"    const errorMessage = jsonData.error.toLowerCase();",
							"    pm.expect(errorMessage).to.satisfy(function(msg) {",
							"        return msg.includes('caracteres') || msg.includes('largo') || msg.includes('límite') || msg.includes('máximo');",
							"    });",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"institution_name\": \"Hospital con nombre muy largo que excede los 100 caracteres permitidos y debería generar un error de validación\",\n  \"tax_id\": \"11111111-1\",\n  \"email\": \"{{email_limites_caracteres}}\",\n  \"address\": \"Calle 789 #12-34, Cali\",\n  \"phone\": \"3005555555\",\n  \"institution_type\": \"Hospital\",\n  \"specialty\": \"Cadena de frío\",\n  \"applicant_name\": \"Dr. Carlos López\",\n  \"applicant_email\": \"carlos.lopez@hospital.com\",\n  \"password\": \"password123\",\n  \"confirm_password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user"
					]
				},
				"description": "Validar límites de caracteres en los campos"
			},
			"response": []
		},
		{
			"name": "Eliminar Todos los Usuarios  - Exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar eliminación de usuarios",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has success message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).to.be.a('string');",
							"    pm.expect(jsonData.message.length).to.be.above(0);",
							"});",
							"",
							"pm.test(\"Response has data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"// Limpiar variables globales después de eliminar",
							"if (pm.response.code === 200) {",
							"    pm.globals.unset('created_user_id');",
							"    pm.globals.unset('created_user_email');",
							"    pm.globals.set('users_deleted', new Date().toISOString());",
							"    console.log('Todos los usuarios eliminados exitosamente');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auth/user/all",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user",
						"all"
					]
				},
				"description": "Eliminar todos los usuarios (solo para testing)"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Setup global para la colección",
					"console.log('Iniciando ejecución de la colección MediSupply Autenticador API');",
					"",
					"// Configurar timestamp de inicio",
					"pm.globals.set('collection_start_time', new Date().toISOString());",
					"",
					"// Las variables created_user_id y created_user_email se mantienen para el flujo de pruebas",
					"",
					"// Verificar que la URL base esté configurada",
					"if (!pm.globals.get('base_url')) {",
					"    pm.globals.set('base_url', 'http://localhost:8080');",
					"    console.log('URL base configurada a:', pm.globals.get('base_url'));",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Teardown global para la colección",
					"console.log('Finalizando ejecución de la colección');",
					"",
					"// Generar reporte de resumen",
					"const startTime = pm.globals.get('collection_start_time');",
					"const endTime = new Date().toISOString();",
					"",
					"console.log('=== RESUMEN DE EJECUCIÓN ===');",
					"console.log('Inicio:', startTime);",
					"console.log('Fin:', endTime);",
					"console.log('Total de pruebas ejecutadas:', pm.info.requestName);",
					"",
					"// Limpiar variables temporales",
					"pm.globals.unset('collection_start_time');",
					"",
					"// Mostrar estadísticas finales",
					"console.log('=== ESTADÍSTICAS ===');",
					"console.log('Último health check:', pm.globals.get('last_health_check'));",
					"if (pm.globals.get('created_user_id')) {",
					"    console.log('Usuario creado:', pm.globals.get('created_user_id'));",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8081",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "550e8400-e29b-41d4-a716-446655440000",
			"type": "string"
		},
		{
			"key": "test_timeout",
			"value": "5000",
			"type": "string"
		},
		{
			"key": "expected_response_time",
			"value": "2000",
			"type": "string"
		},
		{
			"key": "test_environment",
			"value": "development",
			"type": "string"
		}
	]
}