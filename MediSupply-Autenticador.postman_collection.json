{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "MediSupply Autenticador API",
		"description": "Colección de endpoints para el servicio de autenticación MediSupply con automatización de pruebas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Auth Ping",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/ping",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"ping"
							]
						},
						"description": "Health check del servicio de autenticación"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar que el servicio esté funcionando",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is pong\", function () {",
									"    const responseText = pm.response.text().trim();",
									"    pm.expect(responseText).to.eql('\"pong\"');",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"// Guardar timestamp para reportes",
									"pm.globals.set(\"last_health_check\", new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "User Ping",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/user/ping",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"user",
								"ping"
							]
						},
						"description": "Health check del servicio de usuarios"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar que el servicio de usuarios esté funcionando",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has service status\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('service', 'users');",
									"    pm.expect(jsonData.data).to.have.property('status', 'healthy');",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				}
			],
			"description": "Endpoints de health check para verificar el estado de los servicios"
		},
		{
			"name": "Usuarios",
			"item": [
				{
					"name": "Crear Usuario",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"institution_name\": \"{{nombre_institucion}}\",\n  \"tax_id\": \"{{tax_id}}\",\n  \"email\": \"{{email_institucion}}\",\n  \"address\": \"Calle {{Math.floor(Math.random() * 999) + 1}} #{{Math.floor(Math.random() * 99) + 1}}-{{Math.floor(Math.random() * 99) + 1}}, Bogotá\",\n  \"phone\": \"{{telefono}}\",\n  \"institution_type\": \"{{tipo_institucion}}\",\n  \"logo_filename\": \"{{logo_filename}}\",\n  \"specialty\": \"{{especialidad}}\",\n  \"applicant_name\": \"{{nombre_solicitante}}\",\n  \"applicant_email\": \"{{email_solicitante}}\",\n  \"password\": \"password{{Math.floor(Math.random() * 1000) + 100}}\",\n  \"confirm_password\": \"password{{Math.floor(Math.random() * 1000) + 100}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Crear un nuevo usuario con todos los campos"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar datos aleatorios para el usuario",
									"const nombresInstituciones = [",
									"    'Hospital San Rafael', 'Clínica del Sol', 'Laboratorio Central',",
									"    'Hospital General', 'Clínica Especializada', 'Laboratorio Médico',",
									"    'Hospital Universitario', 'Clínica Privada', 'Laboratorio Clínico',",
									"    'Hospital Regional', 'Clínica Familiar', 'Laboratorio Diagnóstico'",
									"];",
									"",
									"const tiposInstitucion = ['Clínica', 'Hospital', 'Laboratorio'];",
									"const especialidades = ['Cadena de frío', 'Alto valor', 'Seguridad'];",
									"const dominios = ['gmail.com', 'hotmail.com', 'yahoo.com', 'hospital.com', 'clinica.com', 'laboratorio.com'];",
									"",
									"// Seleccionar datos aleatorios",
									"const nombreInstitucion = nombresInstituciones[Math.floor(Math.random() * nombresInstituciones.length)];",
									"const tipoInstitucion = tiposInstitucion[Math.floor(Math.random() * tiposInstitucion.length)];",
									"const especialidad = especialidades[Math.floor(Math.random() * especialidades.length)];",
									"",
									"// Generar email aleatorio",
									"const usuarioAleatorio = 'contacto' + Math.floor(Math.random() * 1000);",
									"const dominioAleatorio = dominios[Math.floor(Math.random() * dominios.length)];",
									"const emailAleatorio = usuarioAleatorio + '@' + dominioAleatorio;",
									"",
									"// Generar datos adicionales aleatorios",
									"const taxId = Math.floor(Math.random() * 900000000) + 100000000;",
									"const telefonoAleatorio = '3' + Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');",
									"const nombreSolicitante = 'Dr. ' + ['Juan', 'María', 'Carlos', 'Ana', 'Luis', 'Carmen'][Math.floor(Math.random() * 6)] + ' ' + ['Pérez', 'García', 'López', 'Martínez', 'González'][Math.floor(Math.random() * 5)];",
									"const emailSolicitante = 'solicitante' + Math.floor(Math.random() * 1000) + '@' + dominioAleatorio;",
									"const logoFilename = nombreInstitucion.toLowerCase().replace(/\\s+/g, '_') + '_logo.png';",
									"",
									"// Guardar en variables de entorno",
									"pm.environment.set('nombre_institucion', nombreInstitucion);",
									"pm.environment.set('email_institucion', emailAleatorio);",
									"pm.environment.set('tipo_institucion', tipoInstitucion);",
									"pm.environment.set('especialidad', especialidad);",
									"pm.environment.set('tax_id', taxId.toString());",
									"pm.environment.set('telefono', telefonoAleatorio);",
									"pm.environment.set('nombre_solicitante', nombreSolicitante);",
									"pm.environment.set('email_solicitante', emailSolicitante);",
									"pm.environment.set('logo_filename', logoFilename);",
									"",
									"console.log('Datos aleatorios generados:');",
									"console.log('Institución:', nombreInstitucion);",
									"console.log('Email:', emailAleatorio);",
									"console.log('Tipo:', tipoInstitucion);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar creación exitosa de usuario",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('institution_name');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"});",
									"",
									"pm.test(\"User has required fields\", function () {",
									"    if (pm.response.code === 201) {",
									"        const jsonData = pm.response.json();",
									"        const user = jsonData.data;",
									"        pm.expect(user.institution_name).to.equal(pm.environment.get('nombre_institucion'));",
									"        pm.expect(user.email).to.equal(pm.environment.get('email_institucion'));",
									"        pm.expect(user.institution_type).to.equal(pm.environment.get('tipo_institucion'));",
									"    }",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"// Validar que el ID sea un UUID válido",
									"pm.test(\"ID is valid UUID\", function () {",
									"    if (pm.response.code === 201) {",
									"        const jsonData = pm.response.json();",
									"        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
									"        pm.expect(jsonData.data.id).to.match(uuidRegex);",
									"    }",
									"});",
									"",
									"// Guardar ID del usuario para pruebas posteriores",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.globals.set('created_user_id', jsonData.data.id);",
									"    pm.globals.set('created_user_email', jsonData.data.email);",
									"    console.log('Usuario creado con ID:', jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Crear Usuario Mínimo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar datos mínimos aleatorios",
									"const nombresMinimos = [",
									"    'Clínica del Sol', 'Hospital Central', 'Laboratorio ABC',",
									"    'Clínica San José', 'Hospital Regional', 'Laboratorio XYZ',",
									"    'Clínica Privada', 'Hospital General', 'Laboratorio Médico'",
									"];",
									"",
									"const dominios = ['gmail.com', 'hotmail.com', 'yahoo.com', 'clinica.com', 'hospital.com', 'laboratorio.com'];",
									"",
									"// Seleccionar datos aleatorios",
									"const nombreMinimo = nombresMinimos[Math.floor(Math.random() * nombresMinimos.length)];",
									"const usuarioMinimo = 'info' + Math.floor(Math.random() * 1000);",
									"const dominioMinimo = dominios[Math.floor(Math.random() * dominios.length)];",
									"const emailMinimo = usuarioMinimo + '@' + dominioMinimo;",
									"",
									"// Guardar en variables de entorno",
									"pm.environment.set('nombre_minimo', nombreMinimo);",
									"pm.environment.set('email_minimo', emailMinimo);",
									"",
									"console.log('Datos mínimos generados:');",
									"console.log('Institución:', nombreMinimo);",
									"console.log('Email:', emailMinimo);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar creación exitosa de usuario mínimo",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('institution_name');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"});",
									"",
									"pm.test(\"User has required fields\", function () {",
									"    if (pm.response.code === 201) {",
									"        const jsonData = pm.response.json();",
									"        const user = jsonData.data;",
									"        pm.expect(user.institution_name).to.equal(pm.environment.get('nombre_minimo'));",
									"        pm.expect(user.email).to.equal(pm.environment.get('email_minimo'));",
									"    }",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"// Validar que el ID sea un UUID válido",
									"pm.test(\"ID is valid UUID\", function () {",
									"    if (pm.response.code === 201) {",
									"        const jsonData = pm.response.json();",
									"        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
									"        pm.expect(jsonData.data.id).to.match(uuidRegex);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"institution_name\": \"{{nombre_minimo}}\",\n  \"email\": \"{{email_minimo}}\",\n  \"password\": \"password{{Math.floor(Math.random() * 1000) + 100}}\",\n  \"confirm_password\": \"password{{Math.floor(Math.random() * 1000) + 100}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Crear un usuario con solo los campos obligatorios"
					},
					"response": []
				},
				{
					"name": "Listar Usuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar listado de usuarios",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('users');",
									"    pm.expect(jsonData.data).to.have.property('pagination');",
									"});",
									"",
									"pm.test(\"Pagination structure is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const pagination = jsonData.data.pagination;",
									"    pm.expect(pagination).to.have.property('page');",
									"    pm.expect(pagination).to.have.property('per_page');",
									"    pm.expect(pagination).to.have.property('total');",
									"    pm.expect(pagination).to.have.property('total_pages');",
									"    pm.expect(pagination).to.have.property('has_next');",
									"    pm.expect(pagination).to.have.property('has_prev');",
									"});",
									"",
									"pm.test(\"Users array is present\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.users).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"// Guardar información de paginación para reportes",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.globals.set('total_users', jsonData.data.pagination.total);",
									"    pm.globals.set('current_page', jsonData.data.pagination.page);",
									"    console.log('Total usuarios:', jsonData.data.pagination.total);",
									"    console.log('Página actual:', jsonData.data.pagination.page);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/user?page=1&per_page=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"user"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						},
						"description": "Obtener lista de usuarios con paginación"
					},
					"response": []
				},
				{
					"name": "Obtener Usuario por ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/user/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"user",
								"{{user_id}}"
							]
						},
						"description": "Obtener un usuario específico por su ID"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar obtención de usuario",
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"pm.test(\"Response has user data or error\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 200) {",
									"        pm.expect(jsonData).to.have.property('data');",
									"        pm.expect(jsonData.data).to.have.property('id');",
									"        pm.expect(jsonData.data).to.have.property('institution_name');",
									"        pm.expect(jsonData.data).to.have.property('email');",
									"    } else if (pm.response.code === 404) {",
									"        pm.expect(jsonData).to.have.property('error');",
									"    }",
									"});",
									"",
									"pm.test(\"User ID matches requested\", function () {",
									"    if (pm.response.code === 200) {",
									"        const jsonData = pm.response.json();",
									"        const requestedId = pm.globals.get('created_user_id');",
									"        if (requestedId) {",
									"            pm.expect(jsonData.data.id).to.equal(requestedId);",
									"        }",
									"    }",
									"});",
									"",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Eliminar Todos los Usuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar eliminación de usuarios",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.a('string');",
									"    pm.expect(jsonData.message.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response has data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"// Limpiar variables globales después de eliminar",
									"if (pm.response.code === 200) {",
									"    pm.globals.unset('created_user_id');",
									"    pm.globals.unset('created_user_email');",
									"    pm.globals.set('users_deleted', new Date().toISOString());",
									"    console.log('Todos los usuarios eliminados exitosamente');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/user/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"user",
								"all"
							]
						},
						"description": "Eliminar todos los usuarios (solo para testing)"
					},
					"response": []
				}
			],
			"description": "Endpoints para gestión de usuarios"
		},
		{
			"name": "Ejemplos de Error",
			"item": [
				{
					"name": "Crear Usuario - Campos Faltantes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar datos inválidos aleatorios",
									"const nombresInvalidos = ['', '   ', 'A', 'Hospital con nombre muy largo que excede los 100 caracteres permitidos y debería generar un error de validación'];",
									"const emailsInvalidos = ['email-invalido', 'ventas@', 'ventasfarmacia.com', 'email@', 'email@.com'];",
									"const passwordsInvalidos = ['123', 'abc', '12345', 'password', '1234567'];",
									"const passwordsConfirmInvalidos = ['456', 'xyz', '67890', 'password123', '12345678'];",
									"",
									"// Seleccionar datos aleatorios",
									"const nombreInvalido = nombresInvalidos[Math.floor(Math.random() * nombresInvalidos.length)];",
									"const emailInvalido = emailsInvalidos[Math.floor(Math.random() * emailsInvalidos.length)];",
									"const passwordInvalido = passwordsInvalidos[Math.floor(Math.random() * passwordsInvalidos.length)];",
									"const passwordConfirmInvalido = passwordsConfirmInvalidos[Math.floor(Math.random() * passwordsConfirmInvalidos.length)];",
									"",
									"// Guardar en variables de entorno",
									"pm.environment.set('nombre_invalido', nombreInvalido);",
									"pm.environment.set('email_invalido', emailInvalido);",
									"pm.environment.set('password_invalido', passwordInvalido);",
									"pm.environment.set('password_confirm_invalido', passwordConfirmInvalido);",
									"",
									"console.log('Datos inválidos generados:');",
									"console.log('Nombre:', nombreInvalido);",
									"console.log('Email:', emailInvalido);",
									"console.log('Password:', passwordInvalido);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"institution_name\": \"{{nombre_invalido}}\",\n  \"email\": \"{{email_invalido}}\",\n  \"password\": \"{{password_invalido}}\",\n  \"confirm_password\": \"{{password_confirm_invalido}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Ejemplo de petición con errores de validación"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar que se manejen correctamente los errores",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.be.a('string');",
									"    pm.expect(jsonData.error.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Error message contains validation info\", function () {",
									"    const jsonData = pm.response.json();",
									"    const errorMessage = jsonData.error.toLowerCase();",
									"    pm.expect(errorMessage).to.satisfy(function(msg) {",
									"        return msg.includes('obligatorio') || msg.includes('debe') || msg.includes('formato');",
									"    });",
									"});",
									"",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Crear Usuario - Email Duplicado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Verificar que existe un usuario creado previamente",
									"const createdUserEmail = pm.globals.get('created_user_email');",
									"if (!createdUserEmail) {",
									"    console.log('No hay usuario creado previamente. Creando uno...');",
									"    // Crear un usuario temporal para duplicar",
									"    const tempEmail = 'temp_' + Math.floor(Math.random() * 1000) + '@test.com';",
									"    pm.globals.set('created_user_email', tempEmail);",
									"    console.log('Email temporal creado:', tempEmail);",
									"} else {",
									"    console.log('Usando email existente para duplicar:', createdUserEmail);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar error de email duplicado o éxito si no hay duplicado",
									"pm.test(\"Status code is 201, 400, or 409\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has appropriate structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 201) {",
									"        // Si se creó exitosamente, validar estructura de éxito",
									"        pm.expect(jsonData).to.have.property('data');",
									"        pm.expect(jsonData.data).to.have.property('id');",
									"        console.log('Usuario creado exitosamente (no había duplicado)');",
									"    } else {",
									"        // Si hay error, validar estructura de error",
									"        pm.expect(jsonData).to.have.property('error');",
									"        pm.expect(jsonData.error).to.be.a('string');",
									"        pm.expect(jsonData.error.length).to.be.above(0);",
									"        console.log('Error detectado:', jsonData.error);",
									"    }",
									"});",
									"",
									"pm.test(\"Error message validation (if error)\", function () {",
									"    if (pm.response.code !== 201) {",
									"        const jsonData = pm.response.json();",
									"        const errorMessage = jsonData.error.toLowerCase();",
									"        pm.expect(errorMessage).to.satisfy(function(msg) {",
									"            return msg.includes('duplicado') || msg.includes('ya existe') || msg.includes('existente') || msg.includes('email');",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"institution_name\": \"Hospital Test Duplicado\",\n  \"email\": \"{{created_user_email}}\",\n  \"password\": \"password123\",\n  \"confirm_password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Ejemplo de error por email duplicado"
					},
					"response": []
				},
				{
					"name": "Obtener Usuario - No Encontrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar error de usuario no encontrado",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.be.a('string');",
									"    pm.expect(jsonData.error.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Error message contains not found info\", function () {",
									"    const jsonData = pm.response.json();",
									"    const errorMessage = jsonData.error.toLowerCase();",
									"    pm.expect(errorMessage).to.satisfy(function(msg) {",
									"        return msg.includes('no encontrado') || msg.includes('not found') || msg.includes('no existe');",
									"    });",
									"});",
									"",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/user/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"user",
								"00000000-0000-0000-0000-000000000000"
							]
						},
						"description": "Ejemplo de error cuando el usuario no existe"
					},
					"response": []
				}
			],
			"description": "Ejemplos de peticiones que generan errores para probar el manejo de excepciones"
		},
		{
			"name": "Validaciones",
			"item": [
				{
					"name": "Validar Tipos de Institución",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar creación exitosa con tipo de institución válido",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('institution_name');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('institution_type');",
									"});",
									"",
									"pm.test(\"Institution type is valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    const institutionType = jsonData.data.institution_type;",
									"    pm.expect(institutionType).to.be.oneOf(['Clínica', 'Hospital', 'Laboratorio']);",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"// Guardar ID del usuario para pruebas posteriores",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.globals.set('validation_user_id', jsonData.data.id);",
									"    console.log('Usuario de validación creado con ID:', jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"institution_name\": \"Laboratorio Central\",\n  \"email\": \"info@laboratoriocentral.com\",\n  \"password\": \"password123\",\n  \"confirm_password\": \"password123\",\n  \"institution_type\": \"Laboratorio\",\n  \"specialty\": \"Cadena de frío\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Validar tipos de institución: Clínica, Hospital, Laboratorio"
					},
					"response": []
				},
				{
					"name": "Validar Especialidades",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar creación exitosa con especialidad válida",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('institution_name');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('specialty');",
									"});",
									"",
									"pm.test(\"Specialty is valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    const specialty = jsonData.data.specialty;",
									"    pm.expect(specialty).to.be.oneOf(['Cadena de frío', 'Alto valor', 'Seguridad']);",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"institution_name\": \"Clínica Especializada\",\n  \"email\": \"info@clinicaespecializada.com\",\n  \"password\": \"password123\",\n  \"confirm_password\": \"password123\",\n  \"institution_type\": \"Clínica\",\n  \"specialty\": \"Seguridad\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Validar especialidades: Cadena de frío, Alto valor, Seguridad"
					},
					"response": []
				},
				{
					"name": "Validar Límites de Caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar error por límite de caracteres excedido",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.be.a('string');",
									"    pm.expect(jsonData.error.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Error message contains character limit info\", function () {",
									"    const jsonData = pm.response.json();",
									"    const errorMessage = jsonData.error.toLowerCase();",
									"    pm.expect(errorMessage).to.satisfy(function(msg) {",
									"        return msg.includes('caracteres') || msg.includes('largo') || msg.includes('límite') || msg.includes('máximo');",
									"    });",
									"});",
									"",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"institution_name\": \"Hospital con nombre muy largo que excede los 100 caracteres permitidos y debería generar un error de validación\",\n  \"email\": \"test@hospital.com\",\n  \"password\": \"password123\",\n  \"confirm_password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Validar límites de caracteres en los campos"
					},
					"response": []
				}
			],
			"description": "Ejemplos para probar las validaciones del sistema"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Setup global para la colección",
					"console.log('Iniciando ejecución de la colección MediSupply Autenticador API');",
					"",
					"// Configurar timestamp de inicio",
					"pm.globals.set('collection_start_time', new Date().toISOString());",
					"",
					"// Limpiar variables globales previas",
					"pm.globals.unset('created_user_id');",
					"pm.globals.unset('created_user_email');",
					"",
					"// Verificar que la URL base esté configurada",
					"if (!pm.globals.get('base_url')) {",
					"    pm.globals.set('base_url', 'http://localhost:8080');",
					"    console.log('URL base configurada a:', pm.globals.get('base_url'));",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Teardown global para la colección",
					"console.log('Finalizando ejecución de la colección');",
					"",
					"// Generar reporte de resumen",
					"const startTime = pm.globals.get('collection_start_time');",
					"const endTime = new Date().toISOString();",
					"",
					"console.log('=== RESUMEN DE EJECUCIÓN ===');",
					"console.log('Inicio:', startTime);",
					"console.log('Fin:', endTime);",
					"console.log('Total de pruebas ejecutadas:', pm.info.requestName);",
					"",
					"// Limpiar variables temporales",
					"pm.globals.unset('collection_start_time');",
					"",
					"// Mostrar estadísticas finales",
					"console.log('=== ESTADÍSTICAS ===');",
					"console.log('Último health check:', pm.globals.get('last_health_check'));",
					"if (pm.globals.get('created_user_id')) {",
					"    console.log('Usuario creado:', pm.globals.get('created_user_id'));",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8081",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "550e8400-e29b-41d4-a716-446655440000",
			"type": "string"
		},
		{
			"key": "test_timeout",
			"value": "5000",
			"type": "string"
		},
		{
			"key": "expected_response_time",
			"value": "2000",
			"type": "string"
		},
		{
			"key": "test_environment",
			"value": "development",
			"type": "string"
		}
	]
}
